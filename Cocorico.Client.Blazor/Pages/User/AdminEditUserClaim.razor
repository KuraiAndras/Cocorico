@page "/adminEditUserClaim/{UserId}"

@using Cocorico.Client.Domain.Helpers
@using Cocorico.Client.Domain.Services.Authentication
@using Cocorico.Shared.Dtos.Authentication
@using Cocorico.Shared.Dtos.User
@using Cocorico.Shared.Helpers

@inject ICocoricoClientAuthenticationService AuthenticationService
@inject IUserClient UserHttpClient

@if (UserForAdminPage is null)
{
    <label>Loading...</label>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>User</th>
            </tr>
        </thead>
        <tbody>
            <tr><td>@UserForAdminPage.Email</td></tr>
            <tr><td>@UserForAdminPage.Name</td></tr>
            @foreach (var claim in Claims.ClaimsCollection.Where(c => !c.Equals(Claims.User)))
            {

                @if (UserForAdminPage.Claims.SingleOrDefault(c => c.Equals(claim)) is null)
                {
                    <tr><td><button class="btn btn-danger" @onclick="@(() => AddClaimToUserAsync(claim))">Add as @claim</button></td></tr>
                }
                else
                {
                    <tr><td><button class="btn btn-primary" @onclick="@(() => RemoveClaimFromUserAsync(claim))">Remove from @claim</button></td></tr>
                }
            }
        </tbody>
    </table>
}

@code
{
    [Parameter] public string UserId { get; set; }

    private UserForAdminPage UserForAdminPage { get; set; }

    protected override async Task OnInitializedAsync() => await LoadUserAsync();

    private async Task LoadUserAsync()
    {
        try
        {
            var result = await UserHttpClient.GetUserForAdminPageAsync(UserId);

            UserForAdminPage = result;
        }
        catch (Exception)
        {
            //TODO: Handle fail
        }
    }

    private async Task AddClaimToUserAsync(string claimValue)
    {
        try
        {
            await AuthenticationService.AddClaimToUserAsync(new UserClaimRequest
            {
                UserId = UserId,
                CocoricoClaim = new CocoricoClaim { ClaimValue = claimValue }
            });

            await LoadUserAsync();
        }
        catch (Exception)
        {
            //TODO: Handle fail
        }
    }

    private async Task RemoveClaimFromUserAsync(string claimValue)
    {
        try
        {
            await AuthenticationService.RemoveClaimFromUserAsync(new UserClaimRequest
            {
                UserId = UserId,
                CocoricoClaim = new CocoricoClaim { ClaimValue = claimValue }
            });

            await LoadUserAsync();
        }
        catch (Exception)
        {
            //TODO: Handle fail
        }
    }
}
