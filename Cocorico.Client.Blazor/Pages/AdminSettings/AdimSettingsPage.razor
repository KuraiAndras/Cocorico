@page "/Settings"

@using Cocorico.Client.Domain.ViewModels.Settings

@inject ISettingsViewModel ViewModel

<h3>Set Rotating Id</h3>
<EditForm OnValidSubmit="@ViewModel.SetNewRangeAsync" Model="@ViewModel.IdRange">
    <InputNumber type="integer" @bind-Value="@ViewModel.IdRange.Start">Start</InputNumber>
    <InputNumber type="integer" @bind-Value="@ViewModel.IdRange.End">End</InputNumber>
    <MatButton type="submit">Set Rotating ID Range</MatButton>
</EditForm>

<h3>Add Opening</h3>
<EditForm OnValidSubmit="@ViewModel.AddOpeningAsync" Model="@ViewModel.OpeningToAdd">
    <MatDatePicker EnableTime="true" @bind-Value="@ViewModel.OpeningToAdd.Start" />
    <MatDatePicker EnableTime="true" @bind-Value="@ViewModel.OpeningToAdd.End" />
    <MatButton type="submit">Add</MatButton>
</EditForm>

<h3>Openings</h3>
<table class="table">
    <thead>
        <tr>
            <th>Start</th>
            <th>End</th>
            <th />
        </tr>
    </thead>
    <tbody>
        @foreach (var opening in ViewModel.Openings.OrderByDescending(o => o.End))
        {
            <tr>
                <td><MatDatePicker @bind-Value="@opening.Start" /></td>
                <td><MatDatePicker @bind-Value="@opening.End" /></td>
                <td><MatButton OnClick="@(async _ => await ViewModel.EditOpeningAsync(opening))">Edit</MatButton></td>
                <td><MatButton OnClick="@(async _ => await ViewModel.DeleteOpeningAsync(opening.Id))">Delete</MatButton></td>
            </tr>
        }
    </tbody>
</table>

@code
{

    protected override async Task OnInitializedAsync()
    {
        ViewModel.IdRangeChanged += StateHasChanged;
        await ViewModel.InitializeAsync();
    }

}
