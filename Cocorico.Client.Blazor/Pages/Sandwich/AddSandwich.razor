@page "/AddSandwich"

@using Cocorico.Client.Domain.ViewModels.Sandwich

@inject IAddSandwichViewModel ViewModel

<table class="table">
    <thead>
        <tr>
            <th>Edit</th>
        </tr>
    </thead>
    <tbody>

        <tr>
            <td>
                <MatTextField @bind-Value="@ViewModel.NewSandwichDto.Name" Standard="true" Label="Sandwich name" Outlined="true"></MatTextField>
            </td>
        </tr>
        <tr>
            <td>
                <MatNumericUpDownField Label="Sandwich Price"
                                       DecimalPlaces=0
                                       Dense="true"
                                       @bind-Value=@resultPrice
                                       Outlined="true"
                                       Minimum=0 Maximum=null>
                </MatNumericUpDownField>
            </td>
        </tr>


        @foreach (var ingredient in ViewModel.AvailableIngredients)
        {
            if (ViewModel.NewSandwichDto.Ingredients.SingleOrDefault(i => i.Id == ingredient.Id) is null)
            {
                <tr><td><MatButton Outlined="true" @onclick="@(() => ViewModel.AddIngredient(ingredient))">@ingredient.Name</MatButton></td></tr>
            }
            else
            {
                <tr><td><MatButton Raised="true" @onclick="@(() => ViewModel.RemoveIngredient(ingredient))">@ingredient.Name</MatButton></td></tr>
            }
        }
        <tr><td><MatButton Icon="save" @onclick="@(async_ => onAdd())">Create</MatButton></td></tr>
    </tbody>
</table>

@code
{
    protected override Task OnInitializedAsync() => ViewModel.LoadAvailableIngredientsAsync();

    decimal? resultPrice = null;

    private async void onAdd()
    {
        if(resultPrice != null)
        {
            ViewModel.NewSandwichDto.Price = (int) resultPrice;
        } else
        {
            
            ViewModel.NewSandwichDto.Price = 0;
        }
        await ViewModel.AddAsync();
    }
}