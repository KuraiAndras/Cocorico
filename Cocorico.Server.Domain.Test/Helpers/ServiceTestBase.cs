using Cocorico.DAL.Models;
using Cocorico.DAL.Models.Entities;
using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using System.Linq;

namespace Cocorico.Server.Domain.Test.Helpers
{
    [TestClass]
    public class ServiceTestBase
    {
        protected SqliteConnection Connection;
        protected DbContextOptions<CocoricoDbContext> Options;

        protected CocoricoDbContext NewDbContext => new CocoricoDbContext(Options);

        [TestInitialize]
        public void Initialize()
        {
            Connection = new SqliteConnection("DataSource=:memory:");
            Connection.Open();

            Options = new DbContextOptionsBuilder<CocoricoDbContext>()
                .UseSqlite(Connection)
                .Options;

            using (var context = new CocoricoDbContext(Options))
            {
                context.Database.EnsureCreated();
            }
        }

        protected CocoricoUser SeedUsers()
        {
            var user = new CocoricoUser
            {
                Email = "test1@gmail.com",
                EmailConfirmed = true,
                Name = "Test Name",
                UserName = "Test UserName",
            };

            using (var context = NewDbContext)
            {
                context.Users.Add(user);
                context.SaveChanges();
            }

            using (var context = NewDbContext)
            {
                user = context.Users.First();
            }

            return user;
        }

        protected IEnumerable<Sandwich> SeedSandwiches()
        {
            SeedIngredients();

            var sandwiches = new List<Sandwich>();
            using (var context = NewDbContext)
            {
                //TODO: This should be generated by a method
                var sandwich1 = new Sandwich
                {
                    Name = "Test Name1",
                    Price = 40,
                };

                sandwich1.SandwichIngredients = context.Ingredients.Where(i =>
                        i.Id == 1)
                    .Select(i => new SandwichIngredient
                    {
                        Ingredient = i,
                        Sandwich = sandwich1,
                    })
                    .ToList();

                var sandwich2 = new Sandwich
                {
                    Name = "Test Name2",
                    Price = 50,
                };

                sandwich2.SandwichIngredients = context.Ingredients.Where(i =>
                        i.Id == 1
                        || i.Id == 2)
                    .Select(i => new SandwichIngredient
                    {
                        Ingredient = i,
                        Sandwich = sandwich2,
                    })
                    .ToList();

                var sandwich3 = new Sandwich
                {
                    Name = "Test Name3",
                    Price = 60,
                };

                sandwich3.SandwichIngredients = context.Ingredients.Where(i =>
                        i.Id == 1
                        || i.Id == 2
                        || i.Id == 3)
                    .Select(i => new SandwichIngredient
                    {
                        Ingredient = i,
                        Sandwich = sandwich3,
                    })
                    .ToList();

                sandwiches.Add(sandwich1);
                sandwiches.Add(sandwich2);
                sandwiches.Add(sandwich3);

                context.Sandwiches.AddRange(sandwiches);
                context.SaveChanges();
            }

            return sandwiches;
        }

        protected IEnumerable<Ingredient> SeedIngredients()
        {
            var ingredients = new List<Ingredient>
            {
                new Ingredient{Name = "Test 1"},
                new Ingredient{Name = "Test 2"},
                new Ingredient{Name = "Test 3"},
            };

            using (var context = NewDbContext)
            {
                context.Ingredients.AddRange(ingredients);
                context.SaveChanges();
            }

            return ingredients;
        }

        [TestCleanup]
        public void Cleanup() => Connection.Close();
    }
}
