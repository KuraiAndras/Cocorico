@page "/Sandwiches"
@using Cocorico.Client.Domain.ViewModels.Sandwich
@using Cocorico.Shared.Helpers
@* ReSharper disable once RedundantUsingDirective *@
@using Microsoft.AspNetCore.Components.Authorization
@using Cocorico.Client.Domain.ViewModels.Order

@inject NavigationManager urihelper;
@inject IAddCustomerOrderViewModel OrderViewModel
@inject ISandwichesViewModel ViewModel

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Price</th>
            <AuthorizeView Roles="@Claims.Customer">
                <th> </th>
            </AuthorizeView>
            <AuthorizeView Roles="@Claims.Admin">
                <th> </th>
                <th> </th>
            </AuthorizeView>
        </tr>
    </thead>
    <tbody>
        @foreach (var sandwich in ViewModel.SandwichesList)
        {
            <tr>
                <td>@sandwich.Name</td>
                <td>@sandwich.Price</td>
                <AuthorizeView Roles="@Claims.Customer">
                    <td><button class="btn btn-primary" @onclick="@(() => ViewModel.AddToBasket(sandwich))">Order</button></td>
                </AuthorizeView>
                <AuthorizeView Roles="@Claims.Admin">
                    <td><button class="btn btn-secondary" @onclick="@(() => ViewModel.Edit(sandwich.Id))">Edit</button></td>
                    <td><button class="btn btn-danger" @onclick="@(async () => await ViewModel.DeleteAsync(sandwich.Id))">Delete</button></td>
                </AuthorizeView>
            </tr>
            @string.Join(", ", sandwich.Ingredients.Select(i => i.Name))
        }
        <tr>
            <td>Number of sandwich(es): @OrderViewModel.AddOrderDto.Sandwiches.Count</td>
            <td><button class="btn btn-primary" @onclick="@Redirect">Go to cart</button></td>
        </tr>
    </tbody>
</table>



@code
{
    protected override Task OnInitializedAsync() => ViewModel.LoadSandwichesAsync();
    private void Redirect()
    {
        urihelper.NavigateTo(Urls.Client.AddCustomerOrder);
    }
}
